
  The initial approach was a naive solution, as discussed in class, which didn't properly utilize thread concurrency.
In this approach, each thread was assigned a number between 1-8 and each thread would compute the number of primes
in an equal subset of the range. However, this approach did not utilize concurrency to its potential. This is because
each thread was doing an uneven amount of work. There are varying amounts of primes between different subsets of the range.
Certain threads only had fewer primes than others in their subset, and were "sitting" idle when they completed their work.
When this strategy was used to test the limit of 10^8, the program failed to complete even after 30 minutes and the computer
froze up (2019 MacBook Pro 13 inch with 1.4 GHz Quad-Core Intel Core i5). This naive approach was referenced from the book,
"The Art of Multiprocessor Programming" in section 1.1
  The next approach utilized concurrency much more efficiently. In this approach, instead of having equal subsets for the threads
to work on, each thread would instead work on individual numbers based on their thread number (as a way to calculate the next number to work on)
and "ask" for the next number when they finish. This approach is more efficient because rather than doing uneven work for a range of numbers,
each thread only works on one number at a time while avoiding overlapping work (due to unique thread numbers). This concurrent approach allows
threads to efficiently solve their work and move to the next number rather than some threads waiting idle using resources unnecessarily while others are working.
Using this approach, finding prime numbers took around 2.5 minutes, significantly faster than the original approach which crashed after 30 minutes.
  The algorithm used to find the primes is called "Sieve of Atkin". The code for the algorithm was referenced from GeeksForGeeks and modified
in order to take advantage of concurrent programming. The time complexity for this algorithm is O(N) where N is the maximum value.
